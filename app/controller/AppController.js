/*
 * File: app/controller/AppController.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.AppController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainContainer: '#main-container'
        },

        control: {
            "nestedlist": {
                initialize: 'onNestedlistInitialize'
            }
        }
    },

    onNestedlistInitialize: function(component, eOpts) {
        var orientation = Ext.Viewport.getOrientation();
        this.doOrientationChange(orientation);
    },

    doOrientationChange: function(newOrientation) {
        console.log("orientation changed to " + newOrientation);
        
        
        // need to wait until everythin is initialized;
        var me = this;
        
        var renderFn = function renderPanels() {
            var main = me.getMainContainer();
        
            // wait until main is intialized;
            if(!main) {
                Ext.defer(renderFn, 50, this);
                return;
            }
        
            var portrait = main.down("#portrait");
            var landscape = main.down("#landscape");
        
            // wait until the containers are initialized
            if(!portrait || !landscape) {
                Ext.defer(renderFn, 50, this);
                return;
            }
        
            var list = portrait.down('#vblock-list') || landscape.down('#vblock-list');
            var spcont = portrait.down('#spacetree-container') || landscape.down('#spacetree-container');
            var toolbar = portrait.down('#header-bar') || landscape.down('#header-bar');
        
            // wait until the container's components are initialized
            if(!list || !spcont || !toolbar) {
                Ext.defer(renderFn, 50, this);
                return;
            }
        
            portrait.removeAll(false, true);
            landscape.removeAll(false, true);
            list.remove(toolbar, false);
        
            var target = landscape;
        
            if(newOrientation == 'portrait') {
                target = portrait;
                target.add(toolbar);
            } else {
                landscape.add(toolbar);
            }
            target.add(spcont);
            target.add(list);
            main.setActiveItem(target);
        
        }
        
        // call the function for the first time.
        renderFn();
        
        
        
    }

});