{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "visionURL": "https://vb701-viofm.vce.superna.net:8443",
        "visionUser": "admin",
        "visionPass": "dangerous",
        "designer|userClassName": "VblockRESTController"
    },
    "designerId": "45e13f6d-91c7-4914-ac82-4fd329a935b7",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "visionURL",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "visionUser",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "visionPass",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getBaseResource",
                "designer|params": [
                    "url",
                    "ticket"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "url = this.config.visionURL + url;\r",
                    "\r",
                    "if(ticket) {\r",
                    "    url = url +\"?ticket=\" + ticket;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    method: 'GET',\r",
                    "    url: url,\r",
                    "    useDefaultXhrHeader: false,\r",
                    "    success: function(data) {  \r",
                    "\r",
                    "        var parser=new DOMParser();\r",
                    "        var\txmlDoc=parser.parseFromString(data.responseText,\"text/xml\");\r",
                    "\r",
                    "        var vbs = me.xmlToJson(xmlDoc);\r",
                    "\r",
                    "\r",
                    "        for(var i in vbs.vblocks) {\r",
                    "\r",
                    "            if(i != 'vblock') {\r",
                    "                continue;\r",
                    "            }\r",
                    "\r",
                    "            var vb = vbs.vblocks[i];\r",
                    "\r",
                    "            // these should be the individual vblocks\r",
                    "            console.log(vb);\r",
                    "            var comp = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'compute',\r",
                    "                link: vb.compute.link['@attributes'].href\r",
                    "            });\r",
                    "\r",
                    "            var network = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'network',\r",
                    "                link: vb.network.link['@attributes'].href\r",
                    "            });   \r",
                    "\r",
                    "            var storage = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'storage',\r",
                    "                link: vb.storage.link['@attributes'].href\r",
                    "            });    \r",
                    "\r",
                    "            var conn = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'connectivity',\r",
                    "                link: vb.connectivity.link['@attributes'].href\r",
                    "            });     \r",
                    "\r",
                    "            var rack = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'rack',\r",
                    "                link: vb.rack.link['@attributes'].href\r",
                    "            });          \r",
                    "\r",
                    "            var vb = Ext.create('MyApp.model.TreeModel', {\r",
                    "                text:'vblock ' + vb.serialNum['#text'],\r",
                    "                //type: 'Vblock',\r",
                    "                children: [comp, network, storage, conn, rack]\r",
                    "            });\r",
                    "\r",
                    "            Ext.getStore('VblockTreeStore').getRoot().appendChild(vb);\r",
                    "\r",
                    "        } \r",
                    "\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "32af46b9-416e-4e9a-bd57-eeb207e5e994"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getResource",
                "designer|params": [
                    "url, ticket"
                ],
                "implHandler": [
                    "\r",
                    "alert(\"getting respource\");\r",
                    "url = this.config.visionURL + url;\r",
                    "\r",
                    "var me = this;\r",
                    "Ext.Ajax.request({\r",
                    "    method: 'GET',\r",
                    "    url: url,\r",
                    "    useDefaultXhrHeader: false,\r",
                    "    success: function(data) {        \r",
                    "        alert(data.responseText); \r",
                    "    }\r",
                    "});\r",
                    ""
                ]
            },
            "designerId": "2883a432-e746-4858-bea2-0380aa8011d1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "doLogin",
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var cas = me.config.visionURL + \"/cas/v1/tickets\";\r",
                    "var base = \"/fm/vblocks\";\r",
                    "\r",
                    "\r",
                    "alert('doing login');\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    method: 'POST',\r",
                    "    url: cas,\r",
                    "    params: {\r",
                    "        username: me.config.visionUser,\r",
                    "        password: me.config.visionPass\r",
                    "    },\r",
                    "    useDefaultXhrHeader: false,\r",
                    "    success: function(data) {   \r",
                    "        \r",
                    "        alert('got ticketGrantingTicket');\r",
                    "        var el = document.createElement('div');\r",
                    "        el.innerHTML = data.responseText;        \r",
                    "        var list = el.getElementsByTagName('form');\r",
                    "        me.ticketGrantingTicket = list[0].action;\r",
                    "\r",
                    "        // NExt, get a service ticket. \r",
                    "        Ext.Ajax.request({\r",
                    "            method: 'POST',\r",
                    "            url: me.ticketGrantingTicket,\r",
                    "            params: {\r",
                    "                service: me.config.visionURL + base\r",
                    "            },\r",
                    "            useDefaultXhrHeader: false,\r",
                    "            success: function(data) {        \r",
                    "                alert(data.responseText); \r",
                    "                // fetch the resource on success. \r",
                    "                me.getBaseResource(base, data.responseText);\r",
                    "            }\r",
                    "        });\r",
                    "    }\r",
                    "});"
                ]
            },
            "designerId": "af3cbfd9-bd02-4afe-af3b-12f59bc65849"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "this.doLogin();"
                ]
            },
            "designerId": "81465ace-cf52-4455-88d6-138ceb7cf159"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "xmlToJson",
                "designer|params": [
                    "xml"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "//Create the return object\r",
                    "var obj = {};\r",
                    "\r",
                    "if (xml.nodeType == 1) { // element\r",
                    "    // do attributes\r",
                    "    if (xml.attributes.length > 0) {\r",
                    "        obj[\"@attributes\"] = {};\r",
                    "        for (var j = 0; j < xml.attributes.length; j++) {\r",
                    "            var attribute = xml.attributes.item(j);\r",
                    "            obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r",
                    "        }\r",
                    "    }\r",
                    "} else if (xml.nodeType == 3) { // text\r",
                    "    obj = xml.nodeValue;\r",
                    "}\r",
                    "\r",
                    "// do children\r",
                    "if (xml.hasChildNodes()) {\r",
                    "    for(var i = 0; i < xml.childNodes.length; i++) {\r",
                    "        var item = xml.childNodes.item(i);\r",
                    "        var nodeName = item.nodeName;\r",
                    "        if (typeof(obj[nodeName]) == \"undefined\") {\r",
                    "            obj[nodeName] = me.xmlToJson(item);\r",
                    "        } else {\r",
                    "            if (typeof(obj[nodeName].push) == \"undefined\") {\r",
                    "                var old = obj[nodeName];\r",
                    "                obj[nodeName] = [];\r",
                    "                obj[nodeName].push(old);\r",
                    "            }\r",
                    "            obj[nodeName].push(me.xmlToJson(item));\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "return obj;"
                ]
            },
            "designerId": "13a35585-d759-41ee-9256-2ac7298d1e30"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDynListItemTap",
                "designer|params": [
                    "nestedlist, list, index, target, record, e, eOpts"
                ],
                "implHandler": [
                    "var me = this;\r",
                    "\r",
                    "var onSuccess =  function(data) {\r",
                    "\r",
                    "    me.retrievingData = false;\r",
                    "    var children = me.processDoc(data.responseText);\r",
                    "\r",
                    "    if(!children || children.length == 0) {\r",
                    "        me.setLoading(false);\r",
                    "        return;\r",
                    "    }\r",
                    "\r",
                    "    record.set('leaf', false);\r",
                    "\r",
                    "    children.forEach(function(child) {\r",
                    "        record.appendChild(child);\r",
                    "    });\r",
                    "\r",
                    "    updateViews(true);\r",
                    "};\r",
                    "\r",
                    "var updateViews = function (added) {\r",
                    "    history.pushState();\r",
                    "    me.getApplication().getController('NavSheetController').doSelectionChange(record.id, record, added);\r",
                    "    nestedlist.fireEvent('levelloaded', this, list, index, target, record, e);\r",
                    "};\r",
                    "\r",
                    "\r",
                    "if(record.hasChildNodes()) {\r",
                    "    updateViews(false);\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "// need to add loadmask here\r",
                    "this.setLoading({xtype: 'loadmask', message: \"loading...\"});\r",
                    "\r",
                    "this.retrievingData = true;\r",
                    "\r",
                    "Ext.Ajax.request({\r",
                    "    method: 'GET',\r",
                    "    url: record.get('link'),\r",
                    "    useDefaultXhrHeader: false,\r",
                    "    success: onSuccess\r",
                    "});\r",
                    "\r",
                    "var loadingError = function() {\r",
                    "    if(me.retrievingData) {\r",
                    "        alert(\"failed to retrieve: \" + url);\r",
                    "        me.retrievingData = false;\r",
                    "        me.setLoading(false);\r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "Ext.defer(loadingError, 5000, this);"
                ]
            },
            "designerId": "c20bc1e0-2108-492a-b27a-6422b88e8467"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "processDoc",
                "designer|params": [
                    "xml"
                ],
                "implHandler": [
                    "var parser=new DOMParser();\r",
                    "var\txmlDoc=parser.parseFromString(xml,\"text/xml\");\r",
                    "\r",
                    "var topcontainer = this.xmlToJson(xmlDoc);  // computesystems\r",
                    "console.log(topcontainer);\r",
                    "\r",
                    "var models = [];\r",
                    "\r",
                    "function addLink(element) {\r",
                    "    \r",
                    "    if(!element.link) {\r",
                    "        console.log(\"no links in element\");\r",
                    "        console.log(element);\r",
                    "        return;\r",
                    "    }\r",
                    "    \r",
                    "    for (var child in element.link) {\r",
                    "        var url = \"\";\r",
                    "        if(child == '@attributes') {\r",
                    "            url = element.link[child].href;\r",
                    "        } else {\r",
                    "        \turl = element.link[child]['@attributes'].href;\r",
                    "        }\r",
                    "        var name = url.split('/').pop(); \r",
                    "        addModel(name, url);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "function addChild(type, element) {\r",
                    "    var name = getText(element.name);\r",
                    "    var alias = getText(element.alias);\r",
                    "    var text = type;\r",
                    "    if(name) {\r",
                    "\t\ttext = name;\r",
                    "    } else if (alias) {\r",
                    "        text = alias;\r",
                    "    }\r",
                    "    var url = getText(element.url);\r",
                    "    addModel(text, url);\r",
                    "}\r",
                    "\r",
                    "function addModel(name, link) {\r",
                    "    var model = Ext.create('MyApp.model.TreeModel', {\r",
                    "        text: name,\r",
                    "        link: link\r",
                    "    });\r",
                    "    models.push(model);\r",
                    "}\r",
                    "\r",
                    "function getText(element) {\r",
                    "    if(element && '#text' in element) {\r",
                    "       return element['#text'];\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "for(var i in topcontainer) {\r",
                    "    \r",
                    "    if(i == '#text') {\r",
                    "        continue;\r",
                    "    }        \r",
                    "    \r",
                    "    var elements = topcontainer[i];\r",
                    "    \r",
                    "    if (i == 'link') {\r",
                    "        addLink(elements);\r",
                    "        continue;\r",
                    "    }\r",
                    "\r",
                    "    for(var j in elements) { // computesystem[]  \r",
                    "    \r",
                    "        if(j == '#text') {\r",
                    "            continue;\r",
                    "        }     \r",
                    "\r",
                    "        var element = elements[j]; // computesystem // might be an array\r",
                    "        \r",
                    "        if (j == 'link') {\r",
                    "        \taddLink(elements);\r",
                    "        \tcontinue;\r",
                    "    \t}\r",
                    "        \r",
                    "        if (Ext.isArray(element)) {\r",
                    "            for(var k in element) {\r",
                    "                addChild(j, element[k]);\r",
                    "            }            \r",
                    "        } else {            \r",
                    "\t\t\taddLink(element);\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "return models;"
                ]
            },
            "designerId": "4ea76852-2fca-4fd5-a254-47bd4c640b82"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setLoading",
                "designer|params": [
                    "loading"
                ],
                "implHandler": [
                    "this.getApplication().getController('NavSheetController').setLoading(loading);\r",
                    ""
                ]
            },
            "designerId": "0ead36a7-4223-4603-b4a0-48b9f71c28df"
        }
    ]
}